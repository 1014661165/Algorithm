[
  {
    "returnType": "JavaMethodSignature",
    "methodName": "parseMethodSignature",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "methodStartLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<byte[]>",
    "methodName": "generateKeyPair",
    "params": [
      {
        "paramType": "int",
        "paramName": "keySize"
      },
      {
        "paramType": "String",
        "paramName": "algorithm"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "encrypt",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "msg"
      },
      {
        "paramType": "byte[]",
        "paramName": "publicKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "decrypt",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "encodedMsg"
      },
      {
        "paramType": "byte[]",
        "paramName": "privateKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "generateKey",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "encrypt2",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "msg"
      },
      {
        "paramType": "byte[]",
        "paramName": "secretKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "decrypt2",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "encodedMsg"
      },
      {
        "paramType": "byte[]",
        "paramName": "secretKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "isSimilarCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "code1"
      },
      {
        "paramType": "String",
        "paramName": "code2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "searchFragment",
    "params": [
      {
        "paramType": "List<Fragment>",
        "paramName": "fragments"
      },
      {
        "paramType": "int",
        "paramName": "startIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calculateOverlapping",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Byte>",
    "methodName": "lexer",
    "params": [
      {
        "paramType": "String",
        "paramName": "stat"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getPatch",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "original"
      },
      {
        "paramType": "List<String>",
        "paramName": "revised"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "cosineSimilarity",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "tokensX"
      },
      {
        "paramType": "List<Byte>",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "editDistance",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "tokensX"
      },
      {
        "paramType": "byte[]",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Result>",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "void",
    "methodName": "testDiff",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testCosineSimilarity",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testEditDistance",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testXmlAndJson",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testBuildSuffixArray",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testCountDownLatch",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "public",
    "methodName": "CommitRecord",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "int",
        "paramName": "snippetStartLine"
      },
      {
        "paramType": "int",
        "paramName": "snippetEndLine"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "date"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "submitter"
      },
      {
        "paramType": "String",
        "paramName": "status"
      },
      {
        "paramType": "String",
        "paramName": "commitMessage"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "transform",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "String...",
        "paramName": "files"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "parse",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "version"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CommitRecord",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "int",
        "paramName": "methodId"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CommitRecord",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "int",
        "paramName": "methodId"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "date"
      },
      {
        "paramType": "String",
        "paramName": "authorDate"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      },
      {
        "paramType": "String",
        "paramName": "submitter"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CommitRecord",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "link",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "linkMulti",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "print",
    "params": [
      {
        "paramType": "double",
        "paramName": "num1"
      },
      {
        "paramType": "double",
        "paramName": "num2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getFileContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "GroupContentInfo",
        "paramName": "groupContentInfo"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initRawcommitList",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSingleProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initMultiProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSnapshotBlobMapper",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDeletedFileList",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "singleProDeletedFile",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "multiProDeletedFile",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "findMaxGroupId",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "List<CommitInfo>",
    "methodName": "transform",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "mapping",
    "params": [
      {
        "paramType": "List<CommitInfo>",
        "paramName": "commitInfoList"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getParams",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setRelevantStartLine",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "recordList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "load",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getInstanceCount",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "BlobCommitsetInfo",
    "methodName": "getBlobCommitSetByTransBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "transBlobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "hasMultiRecords",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Boolean",
    "methodName": "isNextRecordExist",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "loadExtraRecords",
    "params": [
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getEarlyCommitId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "Integer",
        "paramName": "hashCode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DB",
    "methodName": "getInstance",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readIntervalText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initRepository",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoDir"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "close",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getTime",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobIdByProName",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "projectName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobPathByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobCommitPathByTransformedBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "transformedBlobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "transformData",
    "params": [
      {
        "paramType": "List<CommitInfo>",
        "paramName": "commitInfoList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkCodeStatus",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateVisualData",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testTimeCompare",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testParamExtraction",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "print",
    "params": [
      {
        "paramType": "double",
        "paramName": "num1"
      },
      {
        "paramType": "double",
        "paramName": "num2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String",
        "paramName": "args[]"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "downloadFileFromURL",
    "params": [
      {
        "paramType": "String",
        "paramName": "urlString"
      },
      {
        "paramType": "File",
        "paramName": "destination"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "blobInfoConfigInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "blobInfoConfigLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dangerConfigInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dangerConfigLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dbConfigInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dbConfigLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "configInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "configLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "evoConfigInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "evoConfigLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "configInit",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "configLoad",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "JsonResult",
    "methodName": "cloneDanger",
    "params": [
      {
        "paramType": "ViewDTO",
        "paramName": "viewDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "JsonResult",
    "methodName": "getLog",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "JsonResult",
    "methodName": "myExceptionHandler",
    "params": [
      {
        "paramType": "Exception",
        "paramName": "e"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "analyse",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "type"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EvolutionMergeResult.EvolutionRecord",
    "methodName": "getNewInstance",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instance"
      },
      {
        "paramType": "String",
        "paramName": "commitDate"
      },
      {
        "paramType": "String",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getConsistBugsNum",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Set<String>",
    "methodName": "getCodeWords",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "getCloneGroupActivety",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractConsistTimeInterval",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "median",
    "params": [
      {
        "paramType": "List<Long>",
        "paramName": "total"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractCloneInformation",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
    "methodName": "getInstances",
    "params": [
      {
        "paramType": "List<EvolutionMergeResult>",
        "paramName": "evoInfo"
      },
      {
        "paramType": "int",
        "paramName": "size"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
    "methodName": "getArrangedInstances",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EvolutionMergeResult>",
    "methodName": "loadData",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "reset",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startAnalyse",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "instanceList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Double>>",
    "methodName": "analyseBetweenInstances",
    "params": [
      {
        "paramType": "List<EvolutionMergeResult.EvolutionRecord>",
        "paramName": "instancesOne"
      },
      {
        "paramType": "List<EvolutionMergeResult.EvolutionRecord>",
        "paramName": "instancesTwo"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeEditBehaviorSimilarity",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceLeft"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceRight"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getSnippetCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "sStartLine"
      },
      {
        "paramType": "int",
        "paramName": "sEndLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "formatCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "codeText"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeSimilarity",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "processEditText",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<diff_match_patch.Diff>",
    "methodName": "processDiffList",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "diffList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeSimilarityBasedOnSet",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputExactMatch",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoInstanceMatched",
    "params": [
      {
        "paramType": "int",
        "paramName": "instanceId1"
      },
      {
        "paramType": "int",
        "paramName": "instanceId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputNearMatch",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputResultBesideExactNear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "getTimeIntervalById",
    "params": [
      {
        "paramType": "int",
        "paramName": "cloneId1"
      },
      {
        "paramType": "int",
        "paramName": "cloneId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "addAllTimeInterval",
    "params": [
      {
        "paramType": "int",
        "paramName": "cloneId1"
      },
      {
        "paramType": "int",
        "paramName": "cloneId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputDirPath"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "outputDirPath"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calcDangerDegree",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputDirPath"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "outputDirPath"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initRawcommitList",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSingleProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initMultiProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EvolutionInfo",
    "methodName": "generateEvolutionInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "groupName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Set<String>",
    "methodName": "analyse",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "type"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "getCloneGroupActivety",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getCloneGroupAge",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "judgeConsistencyModify",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "leftRecord"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "rightRecord"
      }
    ],
    "exceptions": [
      "ParseException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "isModifyEqual",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeDistance",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "initFileMap",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeFatherNodeIndex",
    "params": [
      {
        "paramType": "List<String[]>",
        "paramName": "fileFragList"
      },
      {
        "paramType": "int",
        "paramName": "size_MIN"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_main",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "boolean",
        "paramName": "checklines"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_compute",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "boolean",
        "paramName": "checklines"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_lineMode",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_bisect",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_bisectSplit",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinesToCharsResult",
    "methodName": "diff_linesToChars",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_linesToCharsMunge",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "lineHash"
      },
      {
        "paramType": "int",
        "paramName": "maxLines"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_charsToLines",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonPrefix",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonSuffix",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonOverlap",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatch",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatchI",
    "params": [
      {
        "paramType": "String",
        "paramName": "longtext"
      },
      {
        "paramType": "String",
        "paramName": "shorttext"
      },
      {
        "paramType": "int",
        "paramName": "i"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupSemantic",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupSemanticLossless",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_cleanupSemanticScore",
    "params": [
      {
        "paramType": "String",
        "paramName": "one"
      },
      {
        "paramType": "String",
        "paramName": "two"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupEfficiency",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupMerge",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_xIndex",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_prettyHtml",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_levenshtein",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_toDelta",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_fromDelta",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "delta"
      }
    ],
    "exceptions": [
      "IllegalArgumentException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "match_main",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "match_bitap",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "match_bitapScore",
    "params": [
      {
        "paramType": "int",
        "paramName": "e"
      },
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "match_alphabet",
    "params": [
      {
        "paramType": "String",
        "paramName": "pattern"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "patch_addContext",
    "params": [
      {
        "paramType": "Patch",
        "paramName": "patch"
      },
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_make",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_make",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_deepCopy",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object[]",
    "methodName": "patch_apply",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      },
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "patch_addPadding",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "patch_splitMax",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Patch>",
    "methodName": "patch_fromText",
    "params": [
      {
        "paramType": "String",
        "paramName": "textline"
      }
    ],
    "exceptions": [
      "IllegalArgumentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "toString",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "unescapeForEncodeUriCompatability",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "double",
    "methodName": "MinimumDistance",
    "params": [
      {
        "paramType": "String",
        "paramName": "sourceStr"
      },
      {
        "paramType": "String",
        "paramName": "targetString"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "DiffInfo",
    "params": [
      {
        "paramType": "Integer",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "a_sha"
      },
      {
        "paramType": "String",
        "paramName": "b_sha"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "a_path"
      },
      {
        "paramType": "String",
        "paramName": "b_path"
      },
      {
        "paramType": "String",
        "paramName": "a_commit"
      },
      {
        "paramType": "String",
        "paramName": "b_commit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "readMethodNameCSV",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CsvProvider",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CurrentCommitProvider",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodNameProvider",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readAllTextFast",
    "params": [
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getMethodNameByStartLine",
    "params": [
      {
        "paramType": "MethodItem",
        "paramName": "methodItem"
      }
    ],
    "exceptions": []
  },
  null,
  {
    "returnType": "int",
    "methodName": "getIndexOfLeftBracket",
    "params": [
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "TokenView",
    "params": [
      {
        "paramType": "String",
        "paramName": "url"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getMethodName",
    "params": [
      {
        "paramType": "int",
        "paramName": "fromLine"
      },
      {
        "paramType": "int",
        "paramName": "toLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "preprocess",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertIntoDB",
    "params": [
      {
        "paramType": "List<MethodCloneInfo>",
        "paramName": "bufferList"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeBufferList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": [
      "InterruptedException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSVandInsert",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "createTable",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSVandInsert",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DataSource",
    "methodName": "getDataSource",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "MethodSign",
    "methodName": "getMethodSign",
    "params": [
      {
        "paramType": "String",
        "paramName": "input"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<File>",
        "paramName": "flist"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodItemConsumerOutputer",
    "params": [
      {
        "paramType": "BlockingQueue<List<MethodItem>>",
        "paramName": "queue"
      },
      {
        "paramType": "File",
        "paramName": "outputFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<MethodItem>",
        "paramName": "outputMethodItemList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CommitRecord",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "int",
        "paramName": "methodId"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CommitRecord",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "int",
        "paramName": "methodId"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "date"
      },
      {
        "paramType": "String",
        "paramName": "authorDate"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      },
      {
        "paramType": "String",
        "paramName": "submitter"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CommitRecord",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "RawCommitInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "date"
      },
      {
        "paramType": "String",
        "paramName": "authorDate"
      },
      {
        "paramType": "String",
        "paramName": "author"
      },
      {
        "paramType": "int",
        "paramName": "lineNumber"
      },
      {
        "paramType": "String",
        "paramName": "modifiedFileCount"
      },
      {
        "paramType": "String",
        "paramName": "commitMessage"
      },
      {
        "paramType": "String",
        "paramName": "proName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getFileContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "GroupContentInfo",
        "paramName": "groupContentInfo"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initRawcommitList",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSingleProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initMultiProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSnapshotBlobMapper",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDeletedFileList",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "singleProDeletedFile",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "multiProDeletedFile",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "findMaxGroupId",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "List<CommitInfo>",
    "methodName": "transform",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "mapping",
    "params": [
      {
        "paramType": "List<CommitInfo>",
        "paramName": "commitInfoList"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getParams",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setRelevantStartLine",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "recordList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "load",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "String",
        "paramName": "mapType"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getInstanceCount",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "BlobCommitsetInfo",
    "methodName": "getBlobCommitSetByTransBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "transBlobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "hasMultiRecords",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Boolean",
    "methodName": "isNextRecordExist",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "loadExtraRecords",
    "params": [
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getEarlyCommitId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "Integer",
        "paramName": "hashCode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DB",
    "methodName": "getInstance",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readIntervalText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initRepository",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoDir"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "close",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getTime",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobIdByProName",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "projectName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobPathByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobCommitPathByTransformedBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "transformedBlobId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "transformData",
    "params": [
      {
        "paramType": "List<CommitInfo>",
        "paramName": "commitInfoList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkCodeStatus",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateVisualData",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeChangeFileToCsv",
    "params": [
      {
        "paramType": "List<DiffEntry>",
        "paramName": "changedFileList"
      },
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<DiffEntry>",
    "methodName": "getChangedFileList",
    "params": [
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeBlobFolder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeSourceFile",
    "params": [
      {
        "paramType": "ObjectId",
        "paramName": "blobObjId"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "outputFolder"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "writeRealPathList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeCommitInfo",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeExtraCommitInfo",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initCurFiles",
    "params": [
      {
        "paramType": "RevCommit",
        "paramName": "revCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String",
        "paramName": "arg"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "link",
    "params": [
      {
        "paramType": "String",
        "paramName": "mapType"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "transformToMappingToJson",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "recordsLoadFromDB"
      },
      {
        "paramType": "String",
        "paramName": "groupId"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "linkMulti",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "configMain",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "DBMain",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "detectStart",
    "params": [
      {
        "paramType": "String",
        "paramName": "fileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "pipeLineStart",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "groupMapStart",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finalResult",
    "params": [
      {
        "paramType": "String",
        "paramName": "projectName"
      },
      {
        "paramType": "String...",
        "paramName": "command"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "JsonResult",
    "methodName": "dangerCheckView",
    "params": [
      {
        "paramType": "SingleToolDTO",
        "paramName": "singleToolDTO"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "SingleToolDTO",
    "methodName": "setConfigValueTool",
    "params": [
      {
        "paramType": "ViewDTO",
        "paramName": "viewDTO"
      }
    ],
    "exceptions": []
  },
  null,
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "JsonResult",
    "methodName": "cloneDetect",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoPath"
      },
      {
        "paramType": "Integer",
        "paramName": "minLine"
      },
      {
        "paramType": "Integer",
        "paramName": "mlc"
      },
      {
        "paramType": "Integer",
        "paramName": "mlcc"
      },
      {
        "paramType": "String",
        "paramName": "language"
      },
      {
        "paramType": "Integer",
        "paramName": "threshold"
      },
      {
        "paramType": "Integer",
        "paramName": "openStringHash"
      },
      {
        "paramType": "String",
        "paramName": "granularity"
      },
      {
        "paramType": "String",
        "paramName": "extensions"
      },
      {
        "paramType": "Long",
        "paramName": "sepNum"
      },
      {
        "paramType": "String",
        "paramName": "platform"
      },
      {
        "paramType": "String",
        "paramName": "processor"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "JsonResult",
    "methodName": "readSagaLog",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "JsonResult",
    "methodName": "insertIntoDB",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoPath"
      },
      {
        "paramType": "Boolean",
        "paramName": "multiRepos"
      },
      {
        "paramType": "String",
        "paramName": "language"
      },
      {
        "paramType": "String",
        "paramName": "granularity"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "public",
    "methodName": "MethodInfo",
    "params": [
      {
        "paramType": "Integer",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "packageName"
      },
      {
        "paramType": "Integer",
        "paramName": "startLine"
      },
      {
        "paramType": "Integer",
        "paramName": "endLine"
      },
      {
        "paramType": "String",
        "paramName": "methodName"
      },
      {
        "paramType": "String",
        "paramName": "params"
      },
      {
        "paramType": "Integer",
        "paramName": "groupId"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getPackage",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "getMethodNameAndParam",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "language"
      },
      {
        "paramType": "int",
        "paramName": "anchorLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "delete",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readFrontLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [
      {
        "paramType": "String",
        "paramName": "jdbcDriver"
      },
      {
        "paramType": "String",
        "paramName": "jdbcUrl"
      },
      {
        "paramType": "String",
        "paramName": "jdbcUser"
      },
      {
        "paramType": "String",
        "paramName": "jdbcPassword"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "contextLoads",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testBatchInsert",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "analyse",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "type"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EvolutionMergeResult.EvolutionRecord",
    "methodName": "getNewInstance",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instance"
      },
      {
        "paramType": "String",
        "paramName": "commitDate"
      },
      {
        "paramType": "String",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getConsistBugsNum",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "getCloneGroupActivety",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractConsistTimeInterval",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "median",
    "params": [
      {
        "paramType": "List<Long>",
        "paramName": "total"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractCloneInformation",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
    "methodName": "getInstances",
    "params": [
      {
        "paramType": "List<EvolutionMergeResult>",
        "paramName": "evoInfo"
      },
      {
        "paramType": "int",
        "paramName": "size"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
    "methodName": "getArrangedInstances",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EvolutionMergeResult>",
    "methodName": "loadData",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "reset",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startAnalyse",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "instanceList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Double>>",
    "methodName": "analyseBetweenInstances",
    "params": [
      {
        "paramType": "List<EvolutionMergeResult.EvolutionRecord>",
        "paramName": "instancesOne"
      },
      {
        "paramType": "List<EvolutionMergeResult.EvolutionRecord>",
        "paramName": "instancesTwo"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeEditBehaviorSimilarity",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceLeft"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceRight"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "formatCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "codeText"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeSimilarity",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "processEditText",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<diff_match_patch.Diff>",
    "methodName": "processDiffList",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "diffList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeSimilarityBasedOnSet",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputExactMatch",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoInstanceMatched",
    "params": [
      {
        "paramType": "int",
        "paramName": "instanceId1"
      },
      {
        "paramType": "int",
        "paramName": "instanceId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputNearMatch",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "outputResultBesideExactNear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "getTimeIntervalById",
    "params": [
      {
        "paramType": "int",
        "paramName": "cloneId1"
      },
      {
        "paramType": "int",
        "paramName": "cloneId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "addAllTimeInterval",
    "params": [
      {
        "paramType": "int",
        "paramName": "cloneId1"
      },
      {
        "paramType": "int",
        "paramName": "cloneId2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputDirPath"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "outputDirPath"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calcDangerDegree",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputDirPath"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "outputDirPath"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EvolutionInfo",
    "methodName": "generateEvolutionInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "groupName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Set<String>",
    "methodName": "analyse",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "type"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "getCloneGroupActivety",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getCloneGroupAge",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "judgeConsistencyModify",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "leftRecord"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "rightRecord"
      }
    ],
    "exceptions": [
      "ParseException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "isModifyEqual",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeDistance",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "initFileMap",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeFatherNodeIndex",
    "params": [
      {
        "paramType": "List<String[]>",
        "paramName": "fileFragList"
      },
      {
        "paramType": "int",
        "paramName": "size_MIN"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_main",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "boolean",
        "paramName": "checklines"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_compute",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "boolean",
        "paramName": "checklines"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_lineMode",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_bisect",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_bisectSplit",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      },
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      },
      {
        "paramType": "long",
        "paramName": "deadline"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinesToCharsResult",
    "methodName": "diff_linesToChars",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_linesToCharsMunge",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "lineHash"
      },
      {
        "paramType": "int",
        "paramName": "maxLines"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_charsToLines",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonPrefix",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonSuffix",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_commonOverlap",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatch",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatchI",
    "params": [
      {
        "paramType": "String",
        "paramName": "longtext"
      },
      {
        "paramType": "String",
        "paramName": "shorttext"
      },
      {
        "paramType": "int",
        "paramName": "i"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupSemantic",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupSemanticLossless",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_cleanupSemanticScore",
    "params": [
      {
        "paramType": "String",
        "paramName": "one"
      },
      {
        "paramType": "String",
        "paramName": "two"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupEfficiency",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "diff_cleanupMerge",
    "params": [
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_xIndex",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_prettyHtml",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "diff_levenshtein",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_toDelta",
    "params": [
      {
        "paramType": "List<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Diff>",
    "methodName": "diff_fromDelta",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "delta"
      }
    ],
    "exceptions": [
      "IllegalArgumentException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "match_main",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "match_bitap",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "match_bitapScore",
    "params": [
      {
        "paramType": "int",
        "paramName": "e"
      },
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "loc"
      },
      {
        "paramType": "String",
        "paramName": "pattern"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "match_alphabet",
    "params": [
      {
        "paramType": "String",
        "paramName": "pattern"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "patch_addContext",
    "params": [
      {
        "paramType": "Patch",
        "paramName": "patch"
      },
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_make",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "String",
        "paramName": "text2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_make",
    "params": [
      {
        "paramType": "String",
        "paramName": "text1"
      },
      {
        "paramType": "LinkedList<Diff>",
        "paramName": "diffs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<Patch>",
    "methodName": "patch_deepCopy",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object[]",
    "methodName": "patch_apply",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      },
      {
        "paramType": "String",
        "paramName": "text"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "patch_addPadding",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "patch_splitMax",
    "params": [
      {
        "paramType": "LinkedList<Patch>",
        "paramName": "patches"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Patch>",
    "methodName": "patch_fromText",
    "params": [
      {
        "paramType": "String",
        "paramName": "textline"
      }
    ],
    "exceptions": [
      "IllegalArgumentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "toString",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "unescapeForEncodeUriCompatability",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "double",
    "methodName": "MinimumDistance",
    "params": [
      {
        "paramType": "String",
        "paramName": "sourceStr"
      },
      {
        "paramType": "String",
        "paramName": "targetString"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "check",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "detect",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parse",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterTargetFileCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterSameNameMethodCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterNonFunctionalDifferenceCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterTargetCloneTypeCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateClonePairSimilarity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "output",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterTargetFileCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterSameNameMethodCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "filterTargetCloneTypeCloneGroups",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateClonePairSimilarity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "output",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "loadGroups",
    "params": [
      {
        "paramType": "String",
        "paramName": "cloneGroupPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getJavaMethodNameAndLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getCppMethodNameAndLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getJavaScriptMethodNameAndLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getPythonMethodNameAndLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getGolangMethodNameAndLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int[]",
    "methodName": "calcMeasureListNums",
    "params": [
      {
        "paramType": "String",
        "paramName": "tokenDataPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "calcMeasureOffset",
    "params": [
      {
        "paramType": "int",
        "paramName": "measureId"
      },
      {
        "paramType": "int[]",
        "paramName": "measureListNums"
      },
      {
        "paramType": "State",
        "paramName": "state"
      },
      {
        "paramType": "String",
        "paramName": "tokenDataPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "loadTokens",
    "params": [
      {
        "paramType": "long[]",
        "paramName": "offset"
      },
      {
        "paramType": "String",
        "paramName": "tokenDataPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "calcSimilarity",
    "params": [
      {
        "paramType": "int",
        "paramName": "measureId1"
      },
      {
        "paramType": "int",
        "paramName": "measureId2"
      },
      {
        "paramType": "State",
        "paramName": "state"
      },
      {
        "paramType": "int[]",
        "paramName": "measureListNums"
      },
      {
        "paramType": "String",
        "paramName": "tokenDataFolder"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "calcSimilarity",
    "params": [
      {
        "paramType": "int",
        "paramName": "measureId1"
      },
      {
        "paramType": "int",
        "paramName": "measureId2"
      },
      {
        "paramType": "int",
        "paramName": "snippet1StartToken"
      },
      {
        "paramType": "int",
        "paramName": "snippet1EndToken"
      },
      {
        "paramType": "int",
        "paramName": "snippet2StartToken"
      },
      {
        "paramType": "int",
        "paramName": "snippet2EndToken"
      },
      {
        "paramType": "State",
        "paramName": "state"
      },
      {
        "paramType": "int[]",
        "paramName": "measureListNums"
      },
      {
        "paramType": "String",
        "paramName": "tokenDataFolder"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "searchIndex",
    "params": [
      {
        "paramType": "int[][]",
        "paramName": "measures"
      },
      {
        "paramType": "int",
        "paramName": "pos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calcCoverLength",
    "params": [
      {
        "paramType": "List<int[]>",
        "paramName": "snippets"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readFrontLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readLine",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "int",
        "paramName": "lineNum"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "calcHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getGolangMethodNameAndLine",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calcHeight",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCutRevCommitList",
    "params": [
      {
        "paramType": "List<RevCommit>",
        "paramName": "logRevCommitList"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoEditContentEquals",
    "params": [
      {
        "paramType": "EditContent",
        "paramName": "left"
      },
      {
        "paramType": "EditContent",
        "paramName": "right"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoStringListEquals",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "leftStringList"
      },
      {
        "paramType": "List<String>",
        "paramName": "rightStringList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DiffInfo",
    "methodName": "getDiffInfoBetweenTwoCommit",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "Git",
        "paramName": "git"
      },
      {
        "paramType": "RevCommit",
        "paramName": "oldCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "newCommit"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "cloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "prepareTreeParser",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "String",
        "paramName": "objectId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "mapA2B",
    "params": [
      {
        "paramType": "int",
        "paramName": "a"
      },
      {
        "paramType": "EditList",
        "paramName": "edits"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModified",
    "params": [
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList",
    "methodName": "getEditListFromDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList>",
    "methodName": "processDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CloneInstanceWithStatus",
    "methodName": "getNewCloneInstanceWithStatus",
    "params": [
      {
        "paramType": "EditList",
        "paramName": "editList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "cutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "tmpCutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Set<String>",
    "methodName": "getRealPathSet",
    "params": [
      {
        "paramType": "TreeWalk",
        "paramName": "treeWalk"
      },
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      },
      {
        "paramType": "Set<String>",
        "paramName": "suffixSet"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeRemoveInfo",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeEmptyFile",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeBlobFolder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeSourceFile",
    "params": [
      {
        "paramType": "ObjectId",
        "paramName": "blobObjId"
      },
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "outputFolder"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "writeRealPathList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeCommitInfo",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeExtraCommitInfo",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initCurFiles",
    "params": [
      {
        "paramType": "RevCommit",
        "paramName": "revCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "formatDiffInfo",
    "params": [
      {
        "paramType": "DiffInfo",
        "paramName": "diffInfo"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getFileContent",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "RevCommit",
        "paramName": "revCommit"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCommitList",
    "params": [
      {
        "paramType": "RevWalk",
        "paramName": "revWalk"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "endRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCutRevCommitList",
    "params": [
      {
        "paramType": "Iterable<RevCommit>",
        "paramName": "logRevCommitList"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "endRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeDistance",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "initFileMap",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeFatherNodeIndex",
    "params": [
      {
        "paramType": "List<String[]>",
        "paramName": "fileFragList"
      },
      {
        "paramType": "int",
        "paramName": "size_MIN"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convertTime",
    "params": [
      {
        "paramType": "int",
        "paramName": "commitTime"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "duration",
    "params": [
      {
        "paramType": "String",
        "paramName": "time1"
      },
      {
        "paramType": "String",
        "paramName": "time2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFileExist",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "RevCommit",
        "paramName": "curRevCommit"
      },
      {
        "paramType": "String",
        "paramName": "relativePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getCurCommitBlob",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      },
      {
        "paramType": "Set<String>",
        "paramName": "suffixSet"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeEmptyCommitBlob",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeCommitInfo",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "commitBlobList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "parseDiff",
    "params": [
      {
        "paramType": "String",
        "paramName": "diffLog"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getRelativeFilePath",
    "params": [
      {
        "paramType": "String",
        "paramName": "fullPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getTime",
    "params": [
      {
        "paramType": "int",
        "paramName": "commitTime"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getRepos",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "fileExtensionsMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "release",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String>",
    "methodName": "getLatestCommit",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String>",
    "methodName": "getUpdateFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "earlyCommit"
      },
      {
        "paramType": "String",
        "paramName": "currentCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "RevCommit",
    "methodName": "searchCommit",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "commit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "getAbstractTreeIterator",
    "params": [
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      },
      {
        "paramType": "Repository",
        "paramName": "repository"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "commit"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "outputFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "make",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "make",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setProperties",
    "params": [
      {
        "paramType": "Properties",
        "paramName": "properties"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "Set<String>",
    "methodName": "shingles",
    "params": [
      {
        "paramType": "String",
        "paramName": "line"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "divide4",
    "params": [
      {
        "paramType": "long",
        "paramName": "hash"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getTotalLines",
    "params": [
      {
        "paramType": "File",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName",
    "params": [
      {
        "paramType": "String",
        "paramName": "dataset"
      },
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printToErr",
    "params": [
      {
        "paramType": "MeasureIndex",
        "paramName": "measureIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkStatus",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testCreateTable",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "compute",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "DiffInfo",
    "params": [
      {
        "paramType": "Integer",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "a_sha"
      },
      {
        "paramType": "String",
        "paramName": "b_sha"
      },
      {
        "paramType": "String",
        "paramName": "type"
      },
      {
        "paramType": "String",
        "paramName": "a_path"
      },
      {
        "paramType": "String",
        "paramName": "b_path"
      },
      {
        "paramType": "String",
        "paramName": "a_commit"
      },
      {
        "paramType": "String",
        "paramName": "b_commit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMethodNameCSV",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CsvProvider",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "CurrentCommitProvider",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodNameProvider",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readAllTextFast",
    "params": [
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getMethodNameByStartLine",
    "params": [
      {
        "paramType": "MethodItem",
        "paramName": "methodItem"
      }
    ],
    "exceptions": []
  },
  null,
  {
    "returnType": "int",
    "methodName": "getIndexOfLeftBracket",
    "params": [
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "TokenView",
    "params": [
      {
        "paramType": "String",
        "paramName": "url"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getMethodName",
    "params": [
      {
        "paramType": "int",
        "paramName": "fromLine"
      },
      {
        "paramType": "int",
        "paramName": "toLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DataSource",
    "methodName": "getDataSource",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "MethodSign",
    "methodName": "getMethodSign",
    "params": [
      {
        "paramType": "String",
        "paramName": "input"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<File>",
        "paramName": "flist"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodItemConsumerOutputer",
    "params": [
      {
        "paramType": "BlockingQueue<List<MethodItem>>",
        "paramName": "queue"
      },
      {
        "paramType": "File",
        "paramName": "outputFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<MethodItem>",
        "paramName": "outputMethodItemList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "preprocess",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertIntoDB",
    "params": [
      {
        "paramType": "List<MethodCloneInfo>",
        "paramName": "bufferList"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeBufferList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": [
      "InterruptedException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSVandInsert",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "createTable",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSVandInsert",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String",
        "paramName": "args[]"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "downloadFileFromURL",
    "params": [
      {
        "paramType": "String",
        "paramName": "urlString"
      },
      {
        "paramType": "File",
        "paramName": "destination"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "contextLoads",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException",
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getProjectList",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": [
      "IOException",
      "SQLException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getFileNumber",
    "params": [
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "boolean",
        "paramName": "clone"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "ProjectInfo",
    "methodName": "getFileInfoList",
    "params": [
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "relatedProjectMap"
      },
      {
        "paramType": "int",
        "paramName": "totalValidFile"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "ProjectInfo",
    "methodName": "getFileInfoListCPPMethod",
    "params": [
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "relatedProjectMap"
      },
      {
        "paramType": "int",
        "paramName": "totalValidFile"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "format",
    "params": [
      {
        "paramType": "long",
        "paramName": "millis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "get_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "delete_C_Cplusplus_Java_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllTextFast",
    "params": [
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getStringListOfFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "cosineSimilarity",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "tokensX"
      },
      {
        "paramType": "List<Byte>",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "editDistance",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "tokensX"
      },
      {
        "paramType": "byte[]",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "cosineSimilarityByWord",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "tokensX"
      },
      {
        "paramType": "List<String>",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "List<FileInfo>",
        "paramName": "fileInfoList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkFile",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndexFile",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "readGroupFile",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "spiltGroupId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "unionOnePath",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "methodIdList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>>",
    "methodName": "getGroupIdList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [
      {
        "paramType": "String...",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DataSource",
    "methodName": "ds1DataSource",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "DataSource",
    "methodName": "ds2DataSource",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getNextPath",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<List<Integer>>",
    "methodName": "spiltGroupId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "processOneGroupIdListWithDs2",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "groupIdList"
      },
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "processOneGroupIdWithDs2",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "pathPathMap"
      },
      {
        "paramType": "MeasureIndexMapper",
        "paramName": "measureIndexMapper"
      },
      {
        "paramType": "List<Integer>",
        "paramName": "processedGroupCntList"
      },
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printOnePathDs2",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "int",
        "paramName": "startNodeId"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calcCurFileInfoWithDs2",
    "params": [
      {
        "paramType": "Map<String,List<MeasureIndex>>",
        "paramName": "fileMap"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "pathPathMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printDs2",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "processOneGroupIdList",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "groupIdList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "processOneGroupIdListWithArray",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "groupIdList"
      },
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "processOneGroupId",
    "params": [
      {
        "paramType": "float[][]",
        "paramName": "matrix"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "pathIdxMap"
      },
      {
        "paramType": "MeasureIndexMapper",
        "paramName": "measureIndexMapper"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<MeasureIndex>>",
    "methodName": "loadMeasureMap",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "MeasureIndexMapper",
        "paramName": "measureIndexMapper"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calcCurFileInfo",
    "params": [
      {
        "paramType": "Map<String,List<MeasureIndex>>",
        "paramName": "fileMap"
      },
      {
        "paramType": "float[][]",
        "paramName": "matrix"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "pathIdxMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMatrix",
    "params": [
      {
        "paramType": "float[][]",
        "paramName": "matrix"
      },
      {
        "paramType": "List<String>",
        "paramName": "pathList"
      },
      {
        "paramType": "List<String>",
        "paramName": "projectNameList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "dataset"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "logMatrix",
    "params": [
      {
        "paramType": "float[][]",
        "paramName": "matrix"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calSim",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "Map<String,MyPath>",
        "paramName": "fileMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "getSim",
    "params": [
      {
        "paramType": "MyPath",
        "paramName": "myPathA"
      },
      {
        "paramType": "MyPath",
        "paramName": "myPathB"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "MyPath>",
    "methodName": "getFileMap",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "format",
    "params": [
      {
        "paramType": "long",
        "paramName": "millis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "dataset"
      },
      {
        "paramType": "String",
        "paramName": "regex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "UF",
    "params": [
      {
        "paramType": "int",
        "paramName": "maxNumber"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "union",
    "params": [
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String",
        "paramName": "args[]"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "downloadFileFromURL",
    "params": [
      {
        "paramType": "String",
        "paramName": "urlString"
      },
      {
        "paramType": "File",
        "paramName": "destination"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "RepoCloneInfo",
    "methodName": "getRepoCloneInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo_name"
      },
      {
        "paramType": "String",
        "paramName": "language"
      },
      {
        "paramType": "String",
        "paramName": "granularity"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "RepoCloneFileSim",
    "methodName": "getFileSimInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo_name"
      },
      {
        "paramType": "String",
        "paramName": "language"
      },
      {
        "paramType": "String",
        "paramName": "granularity"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getMeasureIndexCsv",
    "params": [
      {
        "paramType": "CSVRequest",
        "paramName": "csvRequest"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "exportMeasurePairInfos",
    "params": [
      {
        "paramType": "MeasureInfoRequest",
        "paramName": "request"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<ClonePair>",
    "methodName": "getMeasurePairs",
    "params": [
      {
        "paramType": "MeasureInfoRequest",
        "paramName": "request"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "countMeasurePairs",
    "params": [
      {
        "paramType": "MeasureInfoRequest",
        "paramName": "request"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "RepoCloneInfo",
    "methodName": "getRepoCloneInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "String",
        "paramName": "tbName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "RepoCloneFileSim",
    "methodName": "getRepoCloneFileSim",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoName"
      },
      {
        "paramType": "String",
        "paramName": "tbName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printCSV",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "projectList"
      },
      {
        "paramType": "String",
        "paramName": "tbName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printCsvBySpecialProjects",
    "params": [
      {
        "paramType": "String",
        "paramName": "targetProject"
      },
      {
        "paramType": "String",
        "paramName": "relatedProject"
      },
      {
        "paramType": "String",
        "paramName": "tbName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printClonePairs",
    "params": [
      {
        "paramType": "CSVPrinter",
        "paramName": "printer"
      },
      {
        "paramType": "List<ClonePair>",
        "paramName": "clonePairList"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "printCsv",
    "params": [
      {
        "paramType": "String",
        "paramName": "projectNames"
      },
      {
        "paramType": "String",
        "paramName": "tbName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printOpInfos",
    "params": [
      {
        "paramType": "CSVPrinter",
        "paramName": "printer"
      },
      {
        "paramType": "List<FileOPinfo>",
        "paramName": "fileOPinfos"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "check",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "checkMeasureIndexTable",
    "params": [
      {
        "paramType": "FileInfo",
        "paramName": "fileInfo"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkTotalLine",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "transCheck",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "Set<Integer>",
    "methodName": "readSet",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "getCode",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "getId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getFileId",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "searchMethodList",
    "params": [
      {
        "paramType": "MeasureIndex",
        "paramName": "mi"
      },
      {
        "paramType": "int",
        "paramName": "fileId"
      }
    ],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "getMaxMethodId",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dijstra",
    "params": [
      {
        "paramType": "int[][]",
        "paramName": "matrix"
      },
      {
        "paramType": "int",
        "paramName": "source"
      },
      {
        "paramType": "int",
        "paramName": "dest"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getTotalLines",
    "params": [
      {
        "paramType": "File",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readIntervalText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "public",
    "methodName": "UF",
    "params": [
      {
        "paramType": "int",
        "paramName": "N"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "union",
    "params": [
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "Set<String>",
    "methodName": "shingles",
    "params": [
      {
        "paramType": "String",
        "paramName": "line"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getTotalLines",
    "params": [
      {
        "paramType": "File",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName2",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSV",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDBCPP",
    "params": [
      {
        "paramType": "int",
        "paramName": "current"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkStatus",
    "params": [
      {
        "paramType": "int",
        "paramName": "total"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readPairResult",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSV",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printToErr",
    "params": [
      {
        "paramType": "MeasureIndex",
        "paramName": "measureIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkStatus",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readCSV",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkStatus",
    "params": [
      {
        "paramType": "int",
        "paramName": "total"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "getKeywordMap",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<File>",
        "paramName": "flist"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "putEnd",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "FileConsumerOutputer",
    "params": [
      {
        "paramType": "BlockingQueue<List<FileOPInfo>>",
        "paramName": "fileOfRepo"
      },
      {
        "paramType": "File",
        "paramName": "outCSVFile"
      },
      {
        "paramType": "File",
        "paramName": "outTxtFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeParseResult",
    "params": [
      {
        "paramType": "List<FileOPInfo>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "put",
    "params": [
      {
        "paramType": "List<FileOPInfo>",
        "paramName": "flist"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "putEnd",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isJsAndMatchPattern",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkFile",
    "params": [
      {
        "paramType": "File",
        "paramName": "datasetFile"
      },
      {
        "paramType": "File",
        "paramName": "allFile"
      },
      {
        "paramType": "File",
        "paramName": "txtFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getAllFile",
    "params": [],
    "exceptions": [
      "InterruptedException"
    ]
  },
  {
    "returnType": "FileVisitResult",
    "methodName": "visitFile",
    "params": [
      {
        "paramType": "Path",
        "paramName": "file"
      },
      {
        "paramType": "BasicFileAttributes",
        "paramName": "attrs"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "get_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "get_Note",
    "params": [
      {
        "paramType": "String",
        "paramName": "strToHandle"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeFile",
    "params": [
      {
        "paramType": "String",
        "paramName": "outputFileName"
      },
      {
        "paramType": "String",
        "paramName": "strHandled"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeListAndClear",
    "params": [
      {
        "paramType": "List<FileOPInfo>",
        "paramName": "bufferList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getProjectName",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "OPType",
    "methodName": "getOPType",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputComment"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isApache2",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isBSD2",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isBSD3",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isGPL",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isLGPL",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isLGPL21",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isAGPL3",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isMPL",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isMIT",
    "params": [
      {
        "paramType": "Map<String,Integer>",
        "paramName": "keywordmap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startClassify",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "sha1",
    "params": [
      {
        "paramType": "String",
        "paramName": "data"
      }
    ],
    "exceptions": [
      "NoSuchAlgorithmException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getHashPath",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LoaderManagerImpl",
    "methodName": "getLoaderManager",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "boolean",
        "paramName": "started"
      },
      {
        "paramType": "boolean",
        "paramName": "create"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onCreate",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "restoreManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onSaveInstanceState",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onDestroy",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onConfigurationChanged",
    "params": [
      {
        "paramType": "Configuration",
        "paramName": "newConfig"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "NonConfigurationInstances",
    "methodName": "retainNonConfigurationInstances",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "stopManagingCursor",
    "params": [
      {
        "paramType": "Cursor",
        "paramName": "c"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initActionBar",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setDefaultKeyMode",
    "params": [
      {
        "paramType": "int",
        "paramName": "mode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onKeyDown",
    "params": [
      {
        "paramType": "int",
        "paramName": "keyCode"
      },
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchKeyEvent",
    "params": [
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchPopulateAccessibilityEvent",
    "params": [
      {
        "paramType": "AccessibilityEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onMenuItemSelected",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "MenuItem",
        "paramName": "item"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onPanelClosed",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "Menu",
        "paramName": "menu"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onNavigateUp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "showDialog",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "Bundle",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityForResult",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityAsUser",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      },
      {
        "paramType": "UserHandle",
        "paramName": "user"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResult",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "int",
        "paramName": "extraFlags"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResultInner",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "Activity",
        "paramName": "activity"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "startActivityIfNeeded",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "startNextMatchingActivity",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromChild",
    "params": [
      {
        "paramType": "Activity",
        "paramName": "child"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromFragment",
    "params": [
      {
        "paramType": "Fragment",
        "paramName": "fragment"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "recreate",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finish",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finishAffinity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "PendingIntent",
    "methodName": "createPendingResult",
    "params": [
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "flags"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getLocalClassName",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "getSystemService",
    "params": [
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "View",
    "methodName": "onCreateView",
    "params": [
      {
        "paramType": "View",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "name"
      },
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "AttributeSet",
        "paramName": "attrs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpInner",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "FileDescriptor",
        "paramName": "fd"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpViewHierarchy",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "View",
        "paramName": "view"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "shouldUpRecreateTask",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "targetIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "navigateUpTo",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "upIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Intent",
    "methodName": "getParentActivityIntent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "attach",
    "params": [
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "ActivityThread",
        "paramName": "aThread"
      },
      {
        "paramType": "Instrumentation",
        "paramName": "instr"
      },
      {
        "paramType": "IBinder",
        "paramName": "token"
      },
      {
        "paramType": "int",
        "paramName": "ident"
      },
      {
        "paramType": "Application",
        "paramName": "application"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "ActivityInfo",
        "paramName": "info"
      },
      {
        "paramType": "CharSequence",
        "paramName": "title"
      },
      {
        "paramType": "Activity",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "id"
      },
      {
        "paramType": "NonConfigurationInstances",
        "paramName": "lastNonConfigurationInstances"
      },
      {
        "paramType": "Configuration",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performRestart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performResume",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performPause",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStop",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dispatchActivityResult",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "int",
        "paramName": "resultCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LoaderManagerImpl",
    "methodName": "getLoaderManager",
    "params": [
      {
        "paramType": "int",
        "paramName": "index"
      },
      {
        "paramType": "boolean",
        "paramName": "started"
      },
      {
        "paramType": "boolean",
        "paramName": "create"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onCreate",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "restoreManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onSaveInstanceState",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onDestroy",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onConfigurationChanged",
    "params": [
      {
        "paramType": "Configuration",
        "paramName": "newConfig"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "NonConfigurationInstances",
    "methodName": "retainNonConfigurationInstances",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "stopManagingCursor",
    "params": [
      {
        "paramType": "Cursor",
        "paramName": "c"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initActionBar",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setDefaultKeyMode",
    "params": [
      {
        "paramType": "int",
        "paramName": "mode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onKeyDown",
    "params": [
      {
        "paramType": "int",
        "paramName": "keyCode"
      },
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchKeyEvent",
    "params": [
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchPopulateAccessibilityEvent",
    "params": [
      {
        "paramType": "AccessibilityEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onMenuItemSelected",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "MenuItem",
        "paramName": "item"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onPanelClosed",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "Menu",
        "paramName": "menu"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onNavigateUp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "showDialog",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "Bundle",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityForResult",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResult",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "int",
        "paramName": "extraFlags"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResultInner",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "Activity",
        "paramName": "activity"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "startActivityIfNeeded",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromChild",
    "params": [
      {
        "paramType": "Activity",
        "paramName": "child"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromFragment",
    "params": [
      {
        "paramType": "Fragment",
        "paramName": "fragment"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "recreate",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finish",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finishAffinity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "PendingIntent",
    "methodName": "createPendingResult",
    "params": [
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "flags"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getLocalClassName",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "getSystemService",
    "params": [
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "View",
    "methodName": "onCreateView",
    "params": [
      {
        "paramType": "View",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "name"
      },
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "AttributeSet",
        "paramName": "attrs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dump",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "FileDescriptor",
        "paramName": "fd"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "shouldUpRecreateTask",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "targetIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "navigateUpTo",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "upIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "attach",
    "params": [
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "ActivityThread",
        "paramName": "aThread"
      },
      {
        "paramType": "Instrumentation",
        "paramName": "instr"
      },
      {
        "paramType": "IBinder",
        "paramName": "token"
      },
      {
        "paramType": "int",
        "paramName": "ident"
      },
      {
        "paramType": "Application",
        "paramName": "application"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "ActivityInfo",
        "paramName": "info"
      },
      {
        "paramType": "CharSequence",
        "paramName": "title"
      },
      {
        "paramType": "Activity",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "id"
      },
      {
        "paramType": "NonConfigurationInstances",
        "paramName": "lastNonConfigurationInstances"
      },
      {
        "paramType": "Configuration",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performRestart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performResume",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performPause",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStop",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dispatchActivityResult",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "int",
        "paramName": "resultCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LoaderManagerImpl",
    "methodName": "getLoaderManager",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "boolean",
        "paramName": "started"
      },
      {
        "paramType": "boolean",
        "paramName": "create"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onCreate",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "restoreManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onSaveInstanceState",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onDestroy",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onConfigurationChanged",
    "params": [
      {
        "paramType": "Configuration",
        "paramName": "newConfig"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "NonConfigurationInstances",
    "methodName": "retainNonConfigurationInstances",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "stopManagingCursor",
    "params": [
      {
        "paramType": "Cursor",
        "paramName": "c"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initActionBar",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setDefaultKeyMode",
    "params": [
      {
        "paramType": "int",
        "paramName": "mode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onKeyDown",
    "params": [
      {
        "paramType": "int",
        "paramName": "keyCode"
      },
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchKeyEvent",
    "params": [
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchPopulateAccessibilityEvent",
    "params": [
      {
        "paramType": "AccessibilityEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onMenuItemSelected",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "MenuItem",
        "paramName": "item"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onPanelClosed",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "Menu",
        "paramName": "menu"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onNavigateUp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "showDialog",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "Bundle",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityForResult",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityAsUser",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      },
      {
        "paramType": "UserHandle",
        "paramName": "user"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResult",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "int",
        "paramName": "extraFlags"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResultInner",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "Activity",
        "paramName": "activity"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "startActivityIfNeeded",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "startNextMatchingActivity",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromChild",
    "params": [
      {
        "paramType": "Activity",
        "paramName": "child"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromFragment",
    "params": [
      {
        "paramType": "Fragment",
        "paramName": "fragment"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "recreate",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finish",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finishAffinity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "PendingIntent",
    "methodName": "createPendingResult",
    "params": [
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "flags"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getLocalClassName",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "getSystemService",
    "params": [
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "View",
    "methodName": "onCreateView",
    "params": [
      {
        "paramType": "View",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "name"
      },
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "AttributeSet",
        "paramName": "attrs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpInner",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "FileDescriptor",
        "paramName": "fd"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpViewHierarchy",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "View",
        "paramName": "view"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "shouldUpRecreateTask",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "targetIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "navigateUpTo",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "upIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Intent",
    "methodName": "getParentActivityIntent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "attach",
    "params": [
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "ActivityThread",
        "paramName": "aThread"
      },
      {
        "paramType": "Instrumentation",
        "paramName": "instr"
      },
      {
        "paramType": "IBinder",
        "paramName": "token"
      },
      {
        "paramType": "int",
        "paramName": "ident"
      },
      {
        "paramType": "Application",
        "paramName": "application"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "ActivityInfo",
        "paramName": "info"
      },
      {
        "paramType": "CharSequence",
        "paramName": "title"
      },
      {
        "paramType": "Activity",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "id"
      },
      {
        "paramType": "NonConfigurationInstances",
        "paramName": "lastNonConfigurationInstances"
      },
      {
        "paramType": "Configuration",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performRestart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performResume",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performPause",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStop",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dispatchActivityResult",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "int",
        "paramName": "resultCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LoaderManagerImpl",
    "methodName": "getLoaderManager",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "boolean",
        "paramName": "started"
      },
      {
        "paramType": "boolean",
        "paramName": "create"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onCreate",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "restoreManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "savedInstanceState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onSaveInstanceState",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveManagedDialogs",
    "params": [
      {
        "paramType": "Bundle",
        "paramName": "outState"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onDestroy",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onConfigurationChanged",
    "params": [
      {
        "paramType": "Configuration",
        "paramName": "newConfig"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "NonConfigurationInstances",
    "methodName": "retainNonConfigurationInstances",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "stopManagingCursor",
    "params": [
      {
        "paramType": "Cursor",
        "paramName": "c"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initActionBar",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "setDefaultKeyMode",
    "params": [
      {
        "paramType": "int",
        "paramName": "mode"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onKeyDown",
    "params": [
      {
        "paramType": "int",
        "paramName": "keyCode"
      },
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchKeyEvent",
    "params": [
      {
        "paramType": "KeyEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "dispatchPopulateAccessibilityEvent",
    "params": [
      {
        "paramType": "AccessibilityEvent",
        "paramName": "event"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onMenuItemSelected",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "MenuItem",
        "paramName": "item"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "onPanelClosed",
    "params": [
      {
        "paramType": "int",
        "paramName": "featureId"
      },
      {
        "paramType": "Menu",
        "paramName": "menu"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "onNavigateUp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "showDialog",
    "params": [
      {
        "paramType": "int",
        "paramName": "id"
      },
      {
        "paramType": "Bundle",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityForResult",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityAsUser",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      },
      {
        "paramType": "UserHandle",
        "paramName": "user"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResult",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "int",
        "paramName": "extraFlags"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "startIntentSenderForResultInner",
    "params": [
      {
        "paramType": "IntentSender",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "fillInIntent"
      },
      {
        "paramType": "int",
        "paramName": "flagsMask"
      },
      {
        "paramType": "int",
        "paramName": "flagsValues"
      },
      {
        "paramType": "Activity",
        "paramName": "activity"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": [
      "IntentSender.SendIntentException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "startActivityIfNeeded",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "startNextMatchingActivity",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromChild",
    "params": [
      {
        "paramType": "Activity",
        "paramName": "child"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "startActivityFromFragment",
    "params": [
      {
        "paramType": "Fragment",
        "paramName": "fragment"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Bundle",
        "paramName": "options"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "recreate",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finish",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "finishAffinity",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "PendingIntent",
    "methodName": "createPendingResult",
    "params": [
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "flags"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getLocalClassName",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "getSystemService",
    "params": [
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "View",
    "methodName": "onCreateView",
    "params": [
      {
        "paramType": "View",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "name"
      },
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "AttributeSet",
        "paramName": "attrs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpInner",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "FileDescriptor",
        "paramName": "fd"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dumpViewHierarchy",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "PrintWriter",
        "paramName": "writer"
      },
      {
        "paramType": "View",
        "paramName": "view"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "shouldUpRecreateTask",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "targetIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "navigateUpTo",
    "params": [
      {
        "paramType": "Intent",
        "paramName": "upIntent"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Intent",
    "methodName": "getParentActivityIntent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "attach",
    "params": [
      {
        "paramType": "Context",
        "paramName": "context"
      },
      {
        "paramType": "ActivityThread",
        "paramName": "aThread"
      },
      {
        "paramType": "Instrumentation",
        "paramName": "instr"
      },
      {
        "paramType": "IBinder",
        "paramName": "token"
      },
      {
        "paramType": "int",
        "paramName": "ident"
      },
      {
        "paramType": "Application",
        "paramName": "application"
      },
      {
        "paramType": "Intent",
        "paramName": "intent"
      },
      {
        "paramType": "ActivityInfo",
        "paramName": "info"
      },
      {
        "paramType": "CharSequence",
        "paramName": "title"
      },
      {
        "paramType": "Activity",
        "paramName": "parent"
      },
      {
        "paramType": "String",
        "paramName": "id"
      },
      {
        "paramType": "NonConfigurationInstances",
        "paramName": "lastNonConfigurationInstances"
      },
      {
        "paramType": "Configuration",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "scaleFloatingWindow",
    "params": [
      {
        "paramType": "Context",
        "paramName": "context"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performRestart",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performResume",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performPause",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "performStop",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "dispatchActivityResult",
    "params": [
      {
        "paramType": "String",
        "paramName": "who"
      },
      {
        "paramType": "int",
        "paramName": "requestCode"
      },
      {
        "paramType": "int",
        "paramName": "resultCode"
      },
      {
        "paramType": "Intent",
        "paramName": "data"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragment",
    "params": [
      {
        "paramType": "long",
        "paramName": "x1"
      },
      {
        "paramType": "long",
        "paramName": "x2"
      },
      {
        "paramType": "int",
        "paramName": "cloneLen"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType12Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printSnippetPair",
    "params": [
      {
        "paramType": "SnippetPair",
        "paramName": "snippetPair"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "BufferedWriter",
        "paramName": "writer"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType3Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<SnippetPair>",
    "methodName": "mergeType3Snippets",
    "params": [
      {
        "paramType": "List<SnippetPair>",
        "paramName": "snippetPairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Snippet",
    "methodName": "linkSnippets",
    "params": [
      {
        "paramType": "Snippet",
        "paramName": "s1"
      },
      {
        "paramType": "Snippet",
        "paramName": "s2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int[]",
    "methodName": "getSnippetStartEndLine",
    "params": [
      {
        "paramType": "Measure",
        "paramName": "measure"
      },
      {
        "paramType": "int",
        "paramName": "snippetStartIndex"
      },
      {
        "paramType": "int",
        "paramName": "snippetEndIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "HashMap<String,",
    "methodName": "Byte>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasurePairSet",
    "params": [
      {
        "paramType": "PrintWriter",
        "paramName": "printWriter"
      },
      {
        "paramType": "Set<MeasurePair>",
        "paramName": "measurePairSet"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printCloneClassByID",
    "params": [
      {
        "paramType": "PrintWriter",
        "paramName": "printWriter"
      },
      {
        "paramType": "List<Integer>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasureIndex",
    "params": [
      {
        "paramType": "List<File>",
        "paramName": "files"
      }
    ],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragmentClass",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "classInstances"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragment",
    "params": [
      {
        "paramType": "int",
        "paramName": "f1start"
      },
      {
        "paramType": "int",
        "paramName": "f2start"
      },
      {
        "paramType": "int",
        "paramName": "f1end"
      },
      {
        "paramType": "int",
        "paramName": "f2end"
      },
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType12Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType3Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printSnippetPair",
    "params": [
      {
        "paramType": "SnippetPair",
        "paramName": "snippetPair"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "BufferedWriter",
        "paramName": "writer"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<SnippetPair>",
    "methodName": "mergeType3Snippets",
    "params": [
      {
        "paramType": "List<SnippetPair>",
        "paramName": "snippetPairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Snippet",
    "methodName": "linkSnippets",
    "params": [
      {
        "paramType": "Snippet",
        "paramName": "s1"
      },
      {
        "paramType": "Snippet",
        "paramName": "s2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int[]",
    "methodName": "getSnippetStartEndLine",
    "params": [
      {
        "paramType": "Measure",
        "paramName": "measure"
      },
      {
        "paramType": "int",
        "paramName": "snippetStartIndex"
      },
      {
        "paramType": "int",
        "paramName": "snippetEndIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveToken",
    "params": [
      {
        "paramType": "List<SimToken>",
        "paramName": "list"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getIndent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveToken",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "allTokenHashList"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "saveTokenLine",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "allTokenHashList"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "byte[]",
    "methodName": "getLineTokenByteList",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getIndent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer",
    "methodName": "getRank",
    "params": [
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CandidateClone>",
    "methodName": "arrayToCCList",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "frag"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "CCListToarray",
    "params": [
      {
        "paramType": "List<CandidateClone>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "CCSort",
    "params": [
      {
        "paramType": "List<CandidateClone>",
        "paramName": "list"
      },
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "compare",
    "params": [
      {
        "paramType": "Clone",
        "paramName": "clone"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchStart",
    "params": [
      {
        "paramType": "long",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchEnd",
    "params": [
      {
        "paramType": "long",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "generateHashID",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "classIDs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "compare",
    "params": [
      {
        "paramType": "SegmentAndLine",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "compareInList",
    "params": [
      {
        "paramType": "List<SegmentAndLine>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "loadFiles",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeMeasureSep",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "tokenize",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "Word",
    "methodName": "initWord",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printUnionResult",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calculateCoverLength",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "printUnionResult",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calculateCoverLength",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Long>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getCoverLen",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FileVisitResult",
    "methodName": "visitFile",
    "params": [
      {
        "paramType": "Path",
        "paramName": "file"
      },
      {
        "paramType": "BasicFileAttributes",
        "paramName": "attrs"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Character>",
    "methodName": "readChars",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      },
      {
        "paramType": "int",
        "paramName": "outputId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Measure>",
    "methodName": "load",
    "params": [
      {
        "paramType": "int",
        "paramName": "outputId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseFileToInt",
    "params": [
      {
        "paramType": "String",
        "paramName": "srcFile"
      },
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseFileToLong",
    "params": [
      {
        "paramType": "String",
        "paramName": "srcFile"
      },
      {
        "paramType": "List<Long>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "State",
        "paramName": "state"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "State",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "UF",
    "params": [
      {
        "paramType": "int",
        "paramName": "N"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "union",
    "params": [
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DiffInfo",
    "methodName": "getDiffInfoBetweenTwoCommit",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "Git",
        "paramName": "git"
      },
      {
        "paramType": "RevCommit",
        "paramName": "oldCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "newCommit"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "cloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "prepareTreeParser",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "String",
        "paramName": "objectId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "mapA2B",
    "params": [
      {
        "paramType": "int",
        "paramName": "a"
      },
      {
        "paramType": "EditList",
        "paramName": "edits"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModified",
    "params": [
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList",
    "methodName": "getEditListFromDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList>",
    "methodName": "processDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CloneInstanceWithStatus",
    "methodName": "getNewCloneInstanceWithStatus",
    "params": [
      {
        "paramType": "EditList",
        "paramName": "editList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "cutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "tmpCutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "execRuntimeProgram",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "quickCompare",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "State",
        "paramName": "state"
      },
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "State",
    "methodName": "load",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodInfo",
    "params": [
      {
        "paramType": "Integer",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "Integer",
        "paramName": "startLine"
      },
      {
        "paramType": "Integer",
        "paramName": "endLine"
      },
      {
        "paramType": "Integer",
        "paramName": "groupId"
      },
      {
        "paramType": "Integer",
        "paramName": "methodId"
      },
      {
        "paramType": "Long",
        "paramName": "hash1"
      },
      {
        "paramType": "Long",
        "paramName": "hash2"
      },
      {
        "paramType": "Long",
        "paramName": "hash3"
      },
      {
        "paramType": "Long",
        "paramName": "hash4"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "deleteUpdateFileRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "DetectResultManager",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "MethodInfo",
    "methodName": "next",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readNewFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readUpdatedFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readDeletedFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readDeletedRepos",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodAnalyzer",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      },
      {
        "paramType": "DetectResultManager",
        "paramName": "detectResultManager"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "matchNewInstance",
    "params": [
      {
        "paramType": "MethodInfo",
        "paramName": "measureIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertNewRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "changeUpdatedRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getMax",
    "params": [
      {
        "paramType": "String",
        "paramName": "field"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasure2Group",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printModifiedRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "divide4",
    "params": [
      {
        "paramType": "long",
        "paramName": "hash"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "isSimilarCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "code1"
      },
      {
        "paramType": "String",
        "paramName": "code2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "searchFragment",
    "params": [
      {
        "paramType": "List<Fragment>",
        "paramName": "fragments"
      },
      {
        "paramType": "int",
        "paramName": "startIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calculateOverlapping",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Byte>",
    "methodName": "lexer",
    "params": [
      {
        "paramType": "String",
        "paramName": "stat"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getPatch",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "original"
      },
      {
        "paramType": "List<String>",
        "paramName": "revised"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "fileExtensionsMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testSelect",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testSubList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<byte[]>",
    "methodName": "generateKeyPair",
    "params": [
      {
        "paramType": "int",
        "paramName": "keySize"
      },
      {
        "paramType": "String",
        "paramName": "algorithm"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<byte[]>",
    "methodName": "generateKeyPair",
    "params": [
      {
        "paramType": "int",
        "paramName": "keySize"
      },
      {
        "paramType": "String",
        "paramName": "algorithm"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "encrypt",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "msg"
      },
      {
        "paramType": "byte[]",
        "paramName": "publicKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "encrypt",
    "params": [
      {
        "paramType": "String",
        "paramName": "algorithm"
      },
      {
        "paramType": "byte[]",
        "paramName": "msg"
      },
      {
        "paramType": "byte[]",
        "paramName": "publicKey"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calculateOverlapping",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calculateOverlapping",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Byte>",
    "methodName": "lexer",
    "params": [
      {
        "paramType": "String",
        "paramName": "stat"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Byte>",
    "methodName": "lexer",
    "params": [
      {
        "paramType": "String",
        "paramName": "stat"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "editDistance",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "tokensX"
      },
      {
        "paramType": "byte[]",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getPatch",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "original"
      },
      {
        "paramType": "List<String>",
        "paramName": "revised"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getPatch",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "original"
      },
      {
        "paramType": "List<String>",
        "paramName": "revised"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "cosineSimilarity",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "tokensX"
      },
      {
        "paramType": "List<Byte>",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "cosineSimilarity",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "tokensX"
      },
      {
        "paramType": "List<Byte>",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "editDistance",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "tokensX"
      },
      {
        "paramType": "byte[]",
        "paramName": "tokensY"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "parse",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findMaxGroupId",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "List<CommitRecord>",
    "methodName": "parse",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "version"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "version"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getContentByBlobId",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findMaxGroupId",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "setRelevantStartLine",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "recordList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "setRelevantStartLine",
    "params": [
      {
        "paramType": "List<CommitRecord>",
        "paramName": "recordList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getInstanceCount",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getInstanceCount",
    "params": [
      {
        "paramType": "int",
        "paramName": "groupId"
      }
    ],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "Boolean",
    "methodName": "isNextRecordExist",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Boolean",
    "methodName": "isNextRecordExist",
    "params": [
      {
        "paramType": "String",
        "paramName": "blobId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "repoName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DB",
    "methodName": "getInstance",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "DB",
    "methodName": "getInstance",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initDataSource",
    "params": [],
    "exceptions": [
      "SQLException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readIntervalText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "generateVisualData",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readIntervalText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initRepository",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoDir"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initRepository",
    "params": [
      {
        "paramType": "String",
        "paramName": "repoDir"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "getBlobIdByProName",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "projectName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getBlobIdByProName",
    "params": [
      {
        "paramType": "String",
        "paramName": "commitId"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "projectName"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getClassName",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "generateVisualData",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initSingleProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "double",
    "methodName": "computeEditBehaviorSimilarity",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceLeft"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceRight"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initSingleProject",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initSnapshotBlobMapper",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "initSnapshotBlobMapper",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "EvolutionMergeResult.EvolutionRecord",
    "methodName": "getNewInstance",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instance"
      },
      {
        "paramType": "String",
        "paramName": "commitDate"
      },
      {
        "paramType": "String",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EvolutionMergeResult.EvolutionRecord",
    "methodName": "getNewInstance",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instance"
      },
      {
        "paramType": "String",
        "paramName": "commitDate"
      },
      {
        "paramType": "String",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractConsistTimeInterval",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "extractConsistTimeInterval",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "double",
    "methodName": "computeEditBehaviorSimilarity",
    "params": [
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceLeft"
      },
      {
        "paramType": "EvolutionMergeResult.EvolutionRecord",
        "paramName": "instanceRight"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<diff_match_patch.Diff>",
    "methodName": "processDiffList",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "diffList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModifyEqual",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "LinkedList<diff_match_patch.Diff>",
    "methodName": "processDiffList",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "diffList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calcDangerDegree",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calcDangerDegree",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "name"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getCloneGroupAge",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getCloneGroupAge",
    "params": [
      {
        "paramType": "List<List<EvolutionMergeResult.EvolutionRecord>>",
        "paramName": "records"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModifyEqual",
    "params": [
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "leftDiff"
      },
      {
        "paramType": "LinkedList<diff_match_patch.Diff>",
        "paramName": "rightDiff"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeDistance",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatchI",
    "params": [
      {
        "paramType": "String",
        "paramName": "longtext"
      },
      {
        "paramType": "String",
        "paramName": "shorttext"
      },
      {
        "paramType": "int",
        "paramName": "i"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "computeDistance",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "initFileMap",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer>",
    "methodName": "initFileMap",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "fileList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_linesToCharsMunge",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "lineHash"
      },
      {
        "paramType": "int",
        "paramName": "maxLines"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "diff_linesToCharsMunge",
    "params": [
      {
        "paramType": "String",
        "paramName": "text"
      },
      {
        "paramType": "List<String>",
        "paramName": "lineArray"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "lineHash"
      },
      {
        "paramType": "int",
        "paramName": "maxLines"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "diff_halfMatchI",
    "params": [
      {
        "paramType": "String",
        "paramName": "longtext"
      },
      {
        "paramType": "String",
        "paramName": "shorttext"
      },
      {
        "paramType": "int",
        "paramName": "i"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "mapA2B",
    "params": [
      {
        "paramType": "int",
        "paramName": "a"
      },
      {
        "paramType": "EditList",
        "paramName": "edits"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "write",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "String",
        "paramName": "content"
      },
      {
        "paramType": "boolean",
        "paramName": "append"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "double",
    "methodName": "MinimumDistance",
    "params": [
      {
        "paramType": "String",
        "paramName": "sourceStr"
      },
      {
        "paramType": "String",
        "paramName": "targetString"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCutRevCommitList",
    "params": [
      {
        "paramType": "List<RevCommit>",
        "paramName": "logRevCommitList"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoEditContentEquals",
    "params": [
      {
        "paramType": "EditContent",
        "paramName": "left"
      },
      {
        "paramType": "EditContent",
        "paramName": "right"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isTwoStringListEquals",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "leftStringList"
      },
      {
        "paramType": "List<String>",
        "paramName": "rightStringList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "prepareTreeParser",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "String",
        "paramName": "objectId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getNewStartLine",
    "params": [
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCutRevCommitList",
    "params": [
      {
        "paramType": "Iterable<RevCommit>",
        "paramName": "logRevCommitList"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "endRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModified",
    "params": [
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList",
    "methodName": "getEditListFromDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList>",
    "methodName": "processDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CloneInstanceWithStatus",
    "methodName": "getNewCloneInstanceWithStatus",
    "params": [
      {
        "paramType": "EditList",
        "paramName": "editList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "tmpCutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "formatDiffInfo",
    "params": [
      {
        "paramType": "DiffInfo",
        "paramName": "diffInfo"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getFileContent",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "RevCommit",
        "paramName": "revCommit"
      },
      {
        "paramType": "String",
        "paramName": "filePath"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<RevCommit>",
    "methodName": "getCommitList",
    "params": [
      {
        "paramType": "RevWalk",
        "paramName": "revWalk"
      },
      {
        "paramType": "RevCommit",
        "paramName": "startRevCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "endRevCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "generate",
    "params": [
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "generate",
    "params": [
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Measure>",
    "methodName": "loadMeasureList",
    "params": [
      {
        "paramType": "String",
        "paramName": "measureIndexPath"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "sortMeasureList",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Pair>",
    "methodName": "findPairs",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Pair>",
    "methodName": "findPairs",
    "params": [
      {
        "paramType": "final List<Measure>",
        "paramName": "measureList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "run",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "loadConfig",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "output",
    "params": [
      {
        "paramType": "List<Pair>",
        "paramName": "pairList"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "Set<String>",
    "methodName": "shingles",
    "params": [
      {
        "paramType": "String",
        "paramName": "line"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "divide4",
    "params": [
      {
        "paramType": "long",
        "paramName": "hash"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "code"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testGenerate",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchStart",
    "params": [
      {
        "paramType": "int",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchEnd",
    "params": [
      {
        "paramType": "int",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "HashMap<String,",
    "methodName": "Byte>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<SimToken>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<SimToken>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<SimToken>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<SimToken>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveToken",
    "params": [
      {
        "paramType": "List<SimToken>",
        "paramName": "list"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "getLineTokenStringList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "getLineTokenByteList",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte[]",
    "methodName": "getLineTokenByteList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "initWord",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getRepos",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "fileExtensionsMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "repos"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "release",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String>",
    "methodName": "getLatestCommit",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String>",
    "methodName": "getUpdateFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "earlyCommit"
      },
      {
        "paramType": "String",
        "paramName": "currentCommit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "RevCommit",
    "methodName": "searchCommit",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "commit"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "getAbstractTreeIterator",
    "params": [
      {
        "paramType": "RevCommit",
        "paramName": "commit"
      },
      {
        "paramType": "Repository",
        "paramName": "repository"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "getContent",
    "params": [
      {
        "paramType": "String",
        "paramName": "repo"
      },
      {
        "paramType": "String",
        "paramName": "commit"
      },
      {
        "paramType": "String",
        "paramName": "realPath"
      },
      {
        "paramType": "String",
        "paramName": "outputFile"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "{",
    "methodName": "registerAllExtensions",
    "params": [
      {
        "paramType": "(com.google.protobuf.ExtensionRegistryLite)",
        "paramName": "registry"
      }
    ],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "Repository",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "Repository",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getHomepage",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getHomepageBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getGitHttpUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getGitHttpUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getGitSshUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getGitSshUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.Repository",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Repository",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getHomepage",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getHomepageBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getGitHttpUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getGitHttpUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getGitSshUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getGitSshUrlBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "User",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUsername",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUsernameBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getWebUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getWebUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.User",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.User",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUsername",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUsernameBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getWebUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getWebUrlBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "Commit",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "Commit",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getShortId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getShortIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getTimestamp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getTimestampBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.Commit",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Commit",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getShortId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getShortIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getTimestamp",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getTimestampBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "File",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getOldPath",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getOldPathBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getNewPath",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getNewPathBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getBlobId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getBlobIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getEncoding",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getEncodingBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getType",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getTypeBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.File",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.File",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getOldPath",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getOldPathBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getNewPath",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getNewPathBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getBlobId",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getBlobIdBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getEncoding",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getEncodingBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getType",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getTypeBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "Push",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getBefore",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getBeforeBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getAfter",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getAfterBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getRef",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getRefBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getPathWithNamespace",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getPathWithNamespaceBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.Push",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Push",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getBefore",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getBeforeBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getAfter",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getAfterBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getRef",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getRefBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeUser",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.User",
        "paramName": "value"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.UserOrBuilder>",
    "methodName": "getUserFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeRepo",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Repository",
        "paramName": "value"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.RepositoryOrBuilder>",
    "methodName": "getRepoFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getPathWithNamespace",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getPathWithNamespaceBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.CommitOrBuilder>",
    "methodName": "getCommitsFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.FileOrBuilder>",
    "methodName": "getFilesFieldBuilder",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "Issue",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "Issue",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getCreatedAt",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getCreatedAtBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUpdatedAt",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUpdatedAtBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getState",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getStateBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getAction",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getActionBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.Issue",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Issue",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "Builder",
    "methodName": "mergeUser",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.User",
        "paramName": "value"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.UserOrBuilder>",
    "methodName": "getUserFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeRepo",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Repository",
        "paramName": "value"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.RepositoryOrBuilder>",
    "methodName": "getRepoFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getCreatedAt",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getCreatedAtBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUpdatedAt",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUpdatedAtBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getState",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getStateBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getUrl",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getUrlBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getAction",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getActionBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "HeadMeta",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getMessageType",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getMessageTypeBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getCompress",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getCompressBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.HeadMeta",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.HeadMeta",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getMessageType",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getMessageTypeBytes",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "java.lang.String",
    "methodName": "getCompress",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.ByteString",
    "methodName": "getCompressBytes",
    "params": [],
    "exceptions": []
  },
  null,
  {
    "returnType": "private",
    "methodName": "Message",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "com.google.protobuf.InvalidProtocolBufferException"
    ]
  },
  {
    "returnType": "boolean",
    "methodName": "isInitialized",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeTo",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedOutputStream",
        "paramName": "output"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getSerializedSize",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "final java.lang.Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "clear",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.Message",
    "methodName": "buildPartial",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.Message",
        "paramName": "other"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Builder",
    "methodName": "mergeFrom",
    "params": [
      {
        "paramType": "com.google.protobuf.CodedInputStream",
        "paramName": "input"
      },
      {
        "paramType": "com.google.protobuf.ExtensionRegistryLite",
        "paramName": "extensionRegistry"
      }
    ],
    "exceptions": [
      "java.io.IOException"
    ]
  },
  {
    "returnType": "Builder",
    "methodName": "mergeMeta",
    "params": [
      {
        "paramType": "com.fudan.se.bean.GitMessage.HeadMeta",
        "paramName": "value"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "com.fudan.se.bean.GitMessage.HeadMetaOrBuilder>",
    "methodName": "getMetaFieldBuilder",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "com.google.protobuf.Descriptors.FileDescriptor",
    "methodName": "getDescriptor",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "flushRecords",
    "params": [
      {
        "paramType": "Map<String,Boolean>",
        "paramName": "map"
      },
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "GitMessage.Push",
    "methodName": "getPush",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "bytes"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readGroup",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "Set<String>",
    "methodName": "shingles",
    "params": [
      {
        "paramType": "String",
        "paramName": "line"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "divide4",
    "params": [
      {
        "paramType": "long",
        "paramName": "hash"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getTotalLines",
    "params": [
      {
        "paramType": "File",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String[]",
    "methodName": "getProjectInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readMeasureIndex",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertToDB",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printToErr",
    "params": [
      {
        "paramType": "MeasureIndex",
        "paramName": "measureIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "checkStatus",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testRemoveComment",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testCreateTable",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testGetProject",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testLastIndexFrom",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "equals",
    "params": [
      {
        "paramType": "Object",
        "paramName": "obj"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragment",
    "params": [
      {
        "paramType": "long",
        "paramName": "x1"
      },
      {
        "paramType": "long",
        "paramName": "x2"
      },
      {
        "paramType": "int",
        "paramName": "cloneLen"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType12Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printSnippetPair",
    "params": [
      {
        "paramType": "SnippetPair",
        "paramName": "snippetPair"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "BufferedWriter",
        "paramName": "writer"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType3Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<SnippetPair>",
    "methodName": "mergeType3Snippets",
    "params": [
      {
        "paramType": "List<SnippetPair>",
        "paramName": "snippetPairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Snippet",
    "methodName": "linkSnippets",
    "params": [
      {
        "paramType": "Snippet",
        "paramName": "s1"
      },
      {
        "paramType": "Snippet",
        "paramName": "s2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "HashMap<String,",
    "methodName": "Byte>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "new",
    "methodName": "HashMap<>",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasurePairSet",
    "params": [
      {
        "paramType": "PrintWriter",
        "paramName": "printWriter"
      },
      {
        "paramType": "Set<MeasurePair>",
        "paramName": "measurePairSet"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printCloneClassByID",
    "params": [
      {
        "paramType": "PrintWriter",
        "paramName": "printWriter"
      },
      {
        "paramType": "List<Integer>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasureIndex",
    "params": [
      {
        "paramType": "List<File>",
        "paramName": "files"
      }
    ],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragmentClass",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "classInstances"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "gatherCloneFragment",
    "params": [
      {
        "paramType": "int",
        "paramName": "f1start"
      },
      {
        "paramType": "int",
        "paramName": "f2start"
      },
      {
        "paramType": "int",
        "paramName": "f1end"
      },
      {
        "paramType": "int",
        "paramName": "f2end"
      },
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType12Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printType3Clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printSnippetPair",
    "params": [
      {
        "paramType": "SnippetPair",
        "paramName": "snippetPair"
      },
      {
        "paramType": "int",
        "paramName": "groupId"
      },
      {
        "paramType": "BufferedWriter",
        "paramName": "writer"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<SnippetPair>",
    "methodName": "mergeType3Snippets",
    "params": [
      {
        "paramType": "List<SnippetPair>",
        "paramName": "snippetPairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Snippet",
    "methodName": "linkSnippets",
    "params": [
      {
        "paramType": "Snippet",
        "paramName": "s1"
      },
      {
        "paramType": "Snippet",
        "paramName": "s2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isFunction",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tmpList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveToken",
    "params": [
      {
        "paramType": "List<SimToken>",
        "paramName": "list"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Token",
    "methodName": "scan",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getIndent",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "segment",
    "params": [
      {
        "paramType": "String",
        "paramName": "inputFileName"
      },
      {
        "paramType": "int",
        "paramName": "fileID"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "saveToken",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "allTokenHashList"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "saveTokenLine",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "allTokenHashList"
      },
      {
        "paramType": "String",
        "paramName": "outputFileName"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "byte[]",
    "methodName": "getLineTokenByteList",
    "params": [
      {
        "paramType": "List<Byte>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Integer",
    "methodName": "getRank",
    "params": [
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<CandidateClone>",
    "methodName": "arrayToCCList",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "frag"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "CCListToarray",
    "params": [
      {
        "paramType": "List<CandidateClone>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "CCSort",
    "params": [
      {
        "paramType": "List<CandidateClone>",
        "paramName": "list"
      },
      {
        "paramType": "int",
        "paramName": "firstFrom"
      },
      {
        "paramType": "int",
        "paramName": "secondFrom"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "compare",
    "params": [
      {
        "paramType": "Clone",
        "paramName": "clone"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchStart",
    "params": [
      {
        "paramType": "long",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "binarySearchEnd",
    "params": [
      {
        "paramType": "long",
        "paramName": "key"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "generateHashID",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "classIDs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "compare",
    "params": [
      {
        "paramType": "SegmentAndLine",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "compareInList",
    "params": [
      {
        "paramType": "List<SegmentAndLine>",
        "paramName": "list"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "loadFiles",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "checkArgs",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "build",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "writeMeasureSep",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "tokenize",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "Word",
    "methodName": "initWord",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printUnionResult",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calculateCoverLength",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "printUnionResult",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "calculateCoverLength",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseOneDataFile",
    "params": [
      {
        "paramType": "List<Long>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseDataZ",
    "params": [],
    "exceptions": [
      "FileNotFoundException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "getCoverLen",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FileVisitResult",
    "methodName": "visitFile",
    "params": [
      {
        "paramType": "Path",
        "paramName": "file"
      },
      {
        "paramType": "BasicFileAttributes",
        "paramName": "attrs"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Character>",
    "methodName": "readChars",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "List<Measure>",
        "paramName": "measureList"
      },
      {
        "paramType": "int",
        "paramName": "outputId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<Measure>",
    "methodName": "load",
    "params": [
      {
        "paramType": "int",
        "paramName": "outputId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseFileToInt",
    "params": [
      {
        "paramType": "String",
        "paramName": "srcFile"
      },
      {
        "paramType": "List<Integer>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "parseFileToLong",
    "params": [
      {
        "paramType": "String",
        "paramName": "srcFile"
      },
      {
        "paramType": "List<Long>",
        "paramName": "result"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "State",
        "paramName": "state"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "State",
    "methodName": "load",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Token>",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "List<Token>",
        "paramName": "tokenList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "UF",
    "params": [
      {
        "paramType": "int",
        "paramName": "N"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "union",
    "params": [
      {
        "paramType": "int",
        "paramName": "x"
      },
      {
        "paramType": "int",
        "paramName": "y"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "DiffInfo",
    "methodName": "getDiffInfoBetweenTwoCommit",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "Git",
        "paramName": "git"
      },
      {
        "paramType": "RevCommit",
        "paramName": "oldCommit"
      },
      {
        "paramType": "RevCommit",
        "paramName": "newCommit"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "cloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "AbstractTreeIterator",
    "methodName": "prepareTreeParser",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "String",
        "paramName": "objectId"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "int",
    "methodName": "mapA2B",
    "params": [
      {
        "paramType": "int",
        "paramName": "a"
      },
      {
        "paramType": "EditList",
        "paramName": "edits"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "isModified",
    "params": [
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      },
      {
        "paramType": "EditList",
        "paramName": "editList"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList",
    "methodName": "getEditListFromDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "EditList>",
    "methodName": "processDiffEntry",
    "params": [
      {
        "paramType": "Repository",
        "paramName": "repository"
      },
      {
        "paramType": "DiffEntry",
        "paramName": "diffEntry"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "CloneInstanceWithStatus",
    "methodName": "getNewCloneInstanceWithStatus",
    "params": [
      {
        "paramType": "EditList",
        "paramName": "editList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "cutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<EditContent>",
    "methodName": "tmpCutEditContentList",
    "params": [
      {
        "paramType": "List<EditContent>",
        "paramName": "fullEditContentList"
      },
      {
        "paramType": "CloneInstance",
        "paramName": "oldCloneInstance"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "load",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "execRuntimeProgram",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "quickCompare",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "readAllText",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "save",
    "params": [
      {
        "paramType": "State",
        "paramName": "state"
      },
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "State",
    "methodName": "load",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodInfo",
    "params": [
      {
        "paramType": "Integer",
        "paramName": "id"
      },
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "String",
        "paramName": "project"
      },
      {
        "paramType": "Long",
        "paramName": "projectId"
      },
      {
        "paramType": "Integer",
        "paramName": "startLine"
      },
      {
        "paramType": "Integer",
        "paramName": "endLine"
      },
      {
        "paramType": "Integer",
        "paramName": "groupId"
      },
      {
        "paramType": "Integer",
        "paramName": "methodId"
      },
      {
        "paramType": "Long",
        "paramName": "hash1"
      },
      {
        "paramType": "Long",
        "paramName": "hash2"
      },
      {
        "paramType": "Long",
        "paramName": "hash3"
      },
      {
        "paramType": "Long",
        "paramName": "hash4"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "main",
    "params": [
      {
        "paramType": "String[]",
        "paramName": "args"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "deleteUpdateFileRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "DetectResultManager",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "MethodInfo",
    "methodName": "next",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readNewFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readUpdatedFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readDeletedFiles",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readDeletedRepos",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "public",
    "methodName": "MethodAnalyzer",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      },
      {
        "paramType": "DetectResultManager",
        "paramName": "detectResultManager"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "matchNewInstance",
    "params": [
      {
        "paramType": "MethodInfo",
        "paramName": "measureIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "insertNewRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "changeUpdatedRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "getMax",
    "params": [
      {
        "paramType": "String",
        "paramName": "field"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printMeasure2Group",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "printModifiedRecords",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "FPGenerator",
    "methodName": "make",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "reduce",
    "params": [
      {
        "paramType": "long",
        "paramName": "fp"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_char",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_int",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "int",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend_long",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "long",
        "paramName": "v"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "CharSequence",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "extend8",
    "params": [
      {
        "paramType": "long",
        "paramName": "f"
      },
      {
        "paramType": "String",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "private",
    "methodName": "FPGenerator",
    "params": [
      {
        "paramType": "long",
        "paramName": "polynomial"
      },
      {
        "paramType": "int",
        "paramName": "degree"
      }
    ],
    "exceptions": []
  },
  null,
  null,
  {
    "returnType": "public",
    "methodName": "LongOpenHashSet",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      },
      {
        "paramType": "final float",
        "paramName": "f"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "ensureOffsetLength",
    "params": [
      {
        "paramType": "final int",
        "paramName": "arrayLength"
      },
      {
        "paramType": "final int",
        "paramName": "offset"
      },
      {
        "paramType": "final int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findInsertionPoint",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "findKey",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "add",
    "params": [
      {
        "paramType": "final long",
        "paramName": "k"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "nextLong",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "boolean",
    "methodName": "trim",
    "params": [
      {
        "paramType": "final int",
        "paramName": "n"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "rehash",
    "params": [
      {
        "paramType": "final int",
        "paramName": "newP"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "Object",
    "methodName": "clone",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "hashCode",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "readObject",
    "params": [
      {
        "paramType": "java.io.ObjectInputStream",
        "paramName": "s"
      }
    ],
    "exceptions": [
      "java.io.IOException",
      "ClassNotFoundException"
    ]
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForString",
    "params": [
      {
        "paramType": "CharBuffer",
        "paramName": "s"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeOptimizedSimHashForBytes",
    "params": [
      {
        "paramType": "byte[]",
        "paramName": "data"
      },
      {
        "paramType": "int",
        "paramName": "offset"
      },
      {
        "paramType": "int",
        "paramName": "length"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long",
    "methodName": "computeSimHashFromString",
    "params": [
      {
        "paramType": "Set<String>",
        "paramName": "shingles"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "long[]",
    "methodName": "divide4",
    "params": [
      {
        "paramType": "long",
        "paramName": "hash"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "float",
    "methodName": "isSimilarCode",
    "params": [
      {
        "paramType": "String",
        "paramName": "code1"
      },
      {
        "paramType": "String",
        "paramName": "code2"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "searchFragment",
    "params": [
      {
        "paramType": "List<Fragment>",
        "paramName": "fragments"
      },
      {
        "paramType": "int",
        "paramName": "startIndex"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "int",
    "methodName": "calculateOverlapping",
    "params": [
      {
        "paramType": "List<ClonePair>",
        "paramName": "pairs"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<Byte>",
    "methodName": "lexer",
    "params": [
      {
        "paramType": "String",
        "paramName": "stat"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "byte",
    "methodName": "str2hash",
    "params": [
      {
        "paramType": "String",
        "paramName": "str"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "buildSuffixArray",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "calculateHeight",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "List<Integer>",
    "methodName": "process",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "removeComments2",
    "params": [
      {
        "paramType": "String",
        "paramName": "code"
      },
      {
        "paramType": "String",
        "paramName": "language"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "getPatch",
    "params": [
      {
        "paramType": "List<String>",
        "paramName": "original"
      },
      {
        "paramType": "List<String>",
        "paramName": "revised"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      },
      {
        "paramType": "Map<String,Integer>",
        "paramName": "fileExtensionsMap"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "listAllFiles",
    "params": [
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "List<String>",
    "methodName": "readLines",
    "params": [
      {
        "paramType": "String",
        "paramName": "file"
      },
      {
        "paramType": "int",
        "paramName": "startLine"
      },
      {
        "paramType": "int",
        "paramName": "endLine"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "init",
    "params": [
      {
        "paramType": "Config",
        "paramName": "config"
      }
    ],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "String[]",
    "methodName": "getProjectInfo",
    "params": [
      {
        "paramType": "String",
        "paramName": "prefix"
      },
      {
        "paramType": "String",
        "paramName": "path"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "String",
    "methodName": "convert",
    "params": [
      {
        "paramType": "long",
        "paramName": "timeMillis"
      }
    ],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testSelect",
    "params": [],
    "exceptions": [
      "IOException"
    ]
  },
  {
    "returnType": "void",
    "methodName": "test",
    "params": [],
    "exceptions": [
      "Exception"
    ]
  },
  {
    "returnType": "void",
    "methodName": "testSubList",
    "params": [],
    "exceptions": []
  },
  {
    "returnType": "void",
    "methodName": "testGetProjectInfo",
    "params": [],
    "exceptions": []
  }
]